#!/usr/bin/env bash

# NB: local trial script has to be self-contained
# See https://sipb.mit.edu/doc/safe-shell/
set -euf -o pipefail

if [ -t 1 ]; then
  export NORMAL="$(tput sgr0)"
  export RED="$(tput setaf 1)"
  export GREEN="$(tput setaf 2)"
  export MAGENTA="$(tput setaf 5)"
  export CYAN="$(tput setaf 6)"
  export WHITE="$(tput setaf 7)"
  export BOLD="$(tput bold)"
else
  export NORMAL=""
  export RED=""
  export GREEN=""
  export MAGENTA=""
  export CYAN=""
  export WHITE=""
  export BOLD=""
fi

error_exit() {
  echo "${RED}${BOLD}ERROR${NORMAL}${BOLD}: $1${NORMAL}"
  shift
  while [ "$#" -gt "0" ]; do
    echo " - $1"
    shift
  done
  exit 1
}

log_step() {
  echo ''
  echo "${GREEN}${BOLD}INFO${NORMAL}${BOLD}: $1${NORMAL}"
  shift
  while [ "$#" -gt "0" ]; do
    echo " - $1"
    shift
  done
}

log_warn() {
  echo ''
  echo "${GREEN}${BOLD}INFO${NORMAL}${BOLD}: $1${NORMAL}"
  shift
  while [ "$#" -gt "0" ]; do
    echo " - $1"
    shift
  done
}

command_present() {
  type "$1" >/dev/null 2>&1
}

retool_containers_present() {
  # NB: awk is to remove whitespace from `wc`
  RETOOL_IMAGES="$(docker image ls | grep 'retool-onpremise' | wc -l | awk '{print $1}')"
  test "$RETOOL_IMAGES" -gt '0'
}

retool_trial_running() {
  # NB: awk is to remove whitespace from `wc`
  CONTAINERS="$(docker-compose ps -q | wc -l | awk '{print $1}')"
  test "$CONTAINERS" -gt '0'
}

# NB: trim trailing slash on $TMPDIR as different OS's do it differently
INSTALL_DIRECTORY="$HOME/retool"
DOCKER_CONTEXT="$INSTALL_DIRECTORY/retool-onpremise"

cd "$HOME"

if [ ! -d "$DOCKER_CONTEXT" ]; then
  if [ -d "$INSTALL_DIRECTORY" ]; then
    log_step 'found a partial install, cleaning it up...'
    rm -rf "$INSTALL_DIRECTORY"
  fi

  log_step 'setting up install location...' "$INSTALL_DIRECTORY"
  mkdir retool && cd retool

  log_step 'downloading...'
  curl -L -XGET -o master.zip https://github.com/tryretool/retool-onpremise/archive/master.zip

  log_step 'unpacking...'
  unzip master.zip

  # NB: this is to make onprem containers to all get named the same.
  mv retool-onpremise-master retool-onpremise
  cd retool-onpremise
  DOCKER_CONTEXT="$(pwd)"

  log_step 'setting environment variables'
  cp ./docker.env.trial docker.env

  if ! command_present docker; then
    # shellcheck disable=2016
    log_warn '`docker` not found!'

    if [[ "$OSTYPE" == "darwin"* ]]; then
      error_exit "please install \`docker\` manually" \
        "Instructions can be found at ${WHITE}${BOLD}https://docs.docker.com/${NORMAL}" \
        "${BOLD}Remember${NORMAL} to start the \`Docker\` app from the UI."
    else
      error_exit "please install \`docker\` manually" \
        "Instructions can be found at ${WHITE}${BOLD}https://docs.docker.com/${NORMAL}" \
        "${BOLD}Remember${NORMAL} to start the \`docker\` daemon/service."
    fi
  else
    # shellcheck disable=2016
    log_step '`docker` found!'
  fi

  if ! command_present docker-compose; then
    # shellcheck disable=2016
    log_warn '`docker-compose` not found!'

    if [[ "$OSTYPE" == "darwin"* ]]; then
      error_exit "please install \`docker-compose\` manually" \
        "Usually, \`docker\` and \`docker-compose\` are bundled together, consider uninstalling your existing docker implementation" \
        "Instructions can be found at ${WHITE}${BOLD}https://docs.docker.com/${NORMAL}" \
        "${BOLD}Remember${NORMAL} to start the \`Docker\` app and wait for it to be ${GREEN}${BOLD}READY${NORMAL}."
    else
      error_exit "please install \`docker-compose\` manually" \
        "Usually, \`docker\` and \`docker-compose\` are bundled together, consider uninstalling your existing docker implementation" \
        "Instructions can be found at ${WHITE}${BOLD}https://docs.docker.com/${NORMAL}" \
        "${BOLD}Remember${NORMAL} to start the \`docker\` daemon/service and wait for it to be ${GREEN}${BOLD}READY${NORMAL}."
    fi
  else
    # shellcheck disable=2016
    log_step '`docker-compose` found!'
  fi

  if retool_containers_present; then
    log_step 'noticed you have tried Retool before, cleaning up...'
    docker-compose rm -fsv
  fi
else
  cd "$DOCKER_CONTEXT" || error_exit "Couldn't \`cd\` into '$DOCKER_CONTEXT'" \
    "if you are having repeat issues, you can \`rm -rf $INSTALL_DIRECTORY\`" \
    "if you're still having issues, you can stop all docker containers using the \`docker\` command"
fi

if retool_trial_running; then
  log_step 'stopping Retool for update...'
  docker-compose down
fi

log_step 'updating Retool!'
docker-compose pull

log_step 'running Retool!'
docker-compose up -d

echo ""
echo " -- ${GREEN}${BOLD}!! RETOOL IS BOOTING !!${NORMAL} --"
echo ""
echo "  ${CYAN}Navigate to${NORMAL}:          ${WHITE}${BOLD}http://localhost:3000/auth/signup${NORMAL}"
echo "  ${CYAN}To STOP Retool, run${NORMAL}:  ${WHITE}${BOLD}${DOCKER_CONTEXT}/stop-local-trial${NORMAL}"
echo ""

# NB: the API doesn't start up the first time, this is why the below is complex

WAITED=0

api_running() {
  API_DOCKER_CONTAINER="$(docker ps | grep 'retool-onpremise_api')"
  test -n "$API_DOCKER_CONTAINER"
}

# TODO remove \n
printf "%s%s%s%s\n" "Waiting for Retool to start up... " "${RED}${BOLD}" "<Pressing Ctrl-C may prevent proper start-up>" "$NORMAL"

while [ $WAITED -lt 20 ] && api_running; do
  # TODO remove
  echo "Still waiting $WAITED"
  WAITED=$((WAITED + 1))
  sleep 1
done

if ! api_running; then
  # TODO remove
  echo "not running, attempting up -d again"
  docker-compose up -d > /dev/null 2>&1
  WAITED=0
  while [ $WAITED -lt 10 ] && api_running; do
    # TODO remove
    echo "Still waiting $WAITED"
    WAITED=$((WAITED + 1))
    sleep 1
  done
fi

# TODO remove \n
# NB: empty stuff to fully wipe out previous line completely
printf "\r%s%s%s%s%s%s%s%s\n" "$MAGENTA" 'Check out your ' "$BOLD" 'BROWSER' "${NORMAL}${MAGENTA}" ' for some awesomeness!!!' "$NORMAL" '                              '
echo
open "http://localhost:3000/auth/signup"


















