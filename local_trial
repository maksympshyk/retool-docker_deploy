#!/usr/bin/env bash

# See https://sipb.mit.edu/doc/safe-shell/
set -euf -o pipefail

if [ -t 1 ]; then
  export NORMAL="$(tput sgr0)"
  export RED="$(tput setaf 1)"
  export GREEN="$(tput setaf 2)"
  export BOLD="$(tput bold)"
else
  export NORMAL=""
  export RED=""
  export GREEN=""
  export BOLD=""
fi

error_exit() {
  echo "${RED}${BOLD}ERROR${NORMAL}${BOLD}: $1${NORMAL}"
  shift
  while [ "$#" -gt "0" ]; do
    echo " - $1"
    shift
  done
  exit 1
}

log_step() {
  echo ''
  echo "${GREEN}${BOLD}INFO${NORMAL}${BOLD}: $1${NORMAL}"
  shift
  while [ "$#" -gt "0" ]; do
    echo " - $1"
    shift
  done
}

command_present() {
  type "$1" >/dev/null 2>&1
}

cleanup_on_exit() {
  log_step "shutting down containers"
  docker-compose down

  log_step "All done. Have a nice day!"
}

POSSIBLE_INSTALL="$(find "$TMPDIR" -type d -name retool-local-tryout)"
ONPREM_DIRECTORY="$POSSIBLE_INSTALL/retool-onpremise-master"

if [ -z "$POSSIBLE_INSTALL" ] || [ ! -d "$ONPREM_DIRECTORY" ]; then
  cd "$TMPDIR" || error_exit ""
  mkdir -p retool-local-tryout
  cd retool-local-tryout

  INSTALL_LOCATION="$(pwd)"
  log_step 'created retool installation directory...' "$INSTALL_LOCATION"

  log_step 'downloading...'
  wget https://github.com/tryretool/retool-onpremise/archive/master.zip

  log_step 'unpacking...'
  unzip master.zip

  cd retool-onpremise-master

  if ! command_present docker; then
    # shellcheck disable=2016
    log_step '`docker` not found, installing...'
    ./get-docker.sh
  else
    # shellcheck disable=2016
    log_step '`docker` found!'
  fi

  if ! command_present docker-compose; then
    # shellcheck disable=2016
    log_step '`docker-compose` not found, installing...'
    ./get-docker-compose.sh
  else
    # shellcheck disable=2016
    log_step '`docker-compose` found!'
  fi

  log_step 'environment variables set'
  ./docker_setup_trial

else
  cd "$ONPREM_DIRECTORY" || error_exit "Couldn't \`cd\` into '$ONPREM_DIRECTORY'"
fi

log_step 'setting up exit hook'
trap 'cleanup_on_exit' SIGINT

log_step 'running Retool!'
docker-compose up -d

log_step 'containers up and running, tailing the logs'
docker-compose logs -f
